@model FederalBonds.Models.Profile

@{
    ViewData["Title"] = "My Account";

    var myInvestments = Model.Investments?.ToList() ?? new List<FederalBonds.Models.Investment>();
    var allInvestments = (IEnumerable<FederalBonds.Models.Investment>)(ViewBag.TotalInvestments ?? new List<FederalBonds.Models.Investment>());
}

<!-- ============================================================
     ===== Profile Overview Page
     ===== Displays the user’s account details, profile picture,
     ===== and visual analytics of their investments.
     ============================================================ -->

<h2>@ViewData["Title"]</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<!-- ===== Profile information card ===== -->
<div class="card mb-3" style="max-width: 500px;">
    <div class="row g-0">
        <div class="col-md-4">
            @if (!string.IsNullOrEmpty(Model.ImagePath))
            {
                <img src="@Model.ImagePath" alt="@Model.FullName"
                     class="img-fluid rounded-start"
                     style="object-fit:cover; height:100%; width:100%;" />
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center bg-light h-100">
                    <span class="text-muted">No photo available</span>
                </div>
            }
        </div>
        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title">@Model.FullName</h5>
                <p class="card-text">Status: <strong>@(Model.IsActive ? "Active" : "Inactive")</strong></p>

                <a asp-action="Edit" class="btn btn-primary me-2">Edit</a>
                <a asp-action="Delete" class="btn btn-danger">Delete Account</a>
            </div>
        </div>
    </div>
</div>

<!-- ===== Investment statistics section ===== -->
@if (myInvestments.Any())
{
    <div class="row mt-4">
        <!-- ===== Personal investment distribution ===== -->
        <div class="col-md-6 text-center">
            <h5 class="mb-3">My Investment Mix</h5>
            <div style="max-width:300px; margin:0 auto;">
                <canvas id="myInvestmentMixChart" width="300" height="300"></canvas>
                <div id="myInvestmentMixDescription" class="mt-3 text-start small"></div>
            </div>
        </div>

        <!-- ===== Share of total investment pool ===== -->
        <div class="col-md-6 text-center">
            <h5 class="mb-3">My Share of All Investments</h5>
            <div style="max-width:300px; margin:0 auto;">
                <canvas id="myShareChart" width="300" height="300"></canvas>
                <div id="myShareDescription" class="mt-3 text-start small"></div>
            </div>
        </div>
    </div>
}

<!-- ============================================================
     ===== Chart.js Visualization Script
     ===== Renders dynamic pie charts for investment distribution
     ===== and user’s share of the total portfolio.
     ============================================================ -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const myLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
            myInvestments.Select(i => i.Product.Name)
        ));

        const myAmounts = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
            myInvestments.Select(i => (double)i.Amount)
        ));

        const colors = ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1'];

        if (myAmounts.length > 0) {
            // ===== Personal investment mix chart =====
            const ctxMix = document.getElementById('myInvestmentMixChart');
            new Chart(ctxMix, {
                type: 'pie',
                data: {
                    labels: myLabels,
                    datasets: [{
                        data: myAmounts,
                        backgroundColor: colors
                    }]
                },
                options: {
                    plugins: { legend: { display: false } }
                }
            });

            const mixDesc = document.getElementById('myInvestmentMixDescription');
            const total = myAmounts.reduce((a, b) => a + b, 0);
            mixDesc.innerHTML = myLabels.map((label, idx) => {
                const percent = ((myAmounts[idx] / total) * 100).toFixed(2);
                return `
                    <div style="display:flex;align-items:center;margin-bottom:4px;">
                        <div style="width:14px;height:14px;background-color:${colors[idx]};margin-right:6px;border-radius:2px;"></div>
                        <div><strong>${label}:</strong> ${myAmounts[idx].toLocaleString()} € (${percent} %)</div>
                    </div>`;
            }).join("");

            // ===== My share vs total investments =====
            const myTotal = total;
            const allTotals = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                allInvestments.Select(i => (double)i.Amount)
            ));

            const allTotal = allTotals.reduce((a, b) => a + b, 0);
            const others = Math.max(allTotal - myTotal, 0);

            const ctxShare = document.getElementById('myShareChart');
            new Chart(ctxShare, {
                type: 'pie',
                data: {
                    labels: ['My Share', 'Others'],
                    datasets: [{
                        data: [myTotal, others],
                        backgroundColor: ['#007bff', '#e0e0e0']
                    }]
                },
                options: {
                    plugins: { legend: { display: false } }
                }
            });

            const shareDesc = document.getElementById('myShareDescription');
            const sharePercent = ((myTotal / allTotal) * 100).toFixed(2);
            shareDesc.innerHTML = `
                <div style="display:flex;align-items:center;margin-bottom:4px;">
                    <div style="width:14px;height:14px;background-color:#007bff;margin-right:6px;border-radius:2px;"></div>
                    <div><strong>My Share:</strong> ${myTotal.toLocaleString()} € (${sharePercent} %)</div>
                </div>
                <div style="display:flex;align-items:center;">
                    <div style="width:14px;height:14px;background-color:#e0e0e0;margin-right:6px;border-radius:2px;"></div>
                    <div><strong>Others:</strong> ${others.toLocaleString()} € (${(100 - sharePercent).toFixed(2)} %)</div>
                </div>`;
        }
    </script>
}
